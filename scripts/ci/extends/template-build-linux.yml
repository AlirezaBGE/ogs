.template-build-linux:
  stage: build
  retry:
    max: 2
    when: runner_system_failure

  before_script:
    - "echo \"For debugging run: docker run --rm -it -v $CI_BUILDS_DIR:/builds -w=$CI_PROJECT_DIR $CI_JOB_IMAGE\""
    - build_dir=${BUILD_DIR:-$CMAKE_PRESET}
    - build_dir_full=../build/${build_dir}
    - rm -rf $build_dir_full
    - mkdir -p $build_dir_full
    - mkdir build
    - if [[ "$OSTYPE" == "darwin"* ]] ; then readlink_cmd=greadlink; else readlink_cmd=readlink; fi
    - ln -s `$readlink_cmd -f $build_dir_full` build/${build_dir}
    - ([ "${CONAN_USER_HOME}" == "${CI_PROJECT_DIR}/.conan" ]) && conan remove --system-reqs '*'
    - ([[ $BUILD_CTEST_LARGE_ON_MASTER && "${CI_COMMIT_BRANCH}" == "master" && "${CMAKE_ARGS}" == *"USE_PYTHON=ON"* ]]) && export BUILD_CTEST_LARGE=true
  script:
    - cmake -S . -B $build_dir_full --preset=$CMAKE_PRESET $CMAKE_ARGS -DOGS_BUILD_PROCESSES=$BUILD_PROCESSES
    - cd $build_dir_full
    - |
      if [[ -z "$TARGETS" ]]; then
          $BUILD_CMD_PREFIX cmake --build . --target package > >(tee make.output)
          if [ "$BUILD_TESTS" = true ] ; then $BUILD_CMD_PREFIX cmake --build . --target tests ; fi

          if [ "$BUILD_CTEST" = true ]; then
            ctest_exit=0
            ctest -T Test --no-compress-output --exclude-regex LARGE --timeout 900 || ctest_exit=$?
            if [ $ctest_exit -ne 0 ]; then
              echo "ctests failed (showing the last ${NUM_CTEST_ERROR_LINES} lines):"
              xsltproc ${CI_PROJECT_DIR}/scripts/test/ctest-error-output.xsl Testing/*/Test.xml | tail -n ${NUM_CTEST_ERROR_LINES}
              exit $ctest_exit
            fi
          fi

          if [ "$BUILD_CTEST_LARGE" = true ] ; then $BUILD_CMD_PREFIX cmake --build . --target ctest-large ; fi
          if [ "$BUILD_CTEST" = true ] ; then cp Testing/**/Test.xml Tests/ctest.xml ; fi
          if [ "$BUILD_CTEST_LARGE" = true ] ; then cp Testing/**/Test.xml Tests/ctest-large.xml ; fi
      else
          $BUILD_CMD_PREFIX cmake --build . --target ${TARGETS} > >(tee make.output)
      fi
    - |
      if [[ "$CHECK_WARNINGS" = true ]] ; then
          if [[ $(cat make.output | grep warning -i | grep -v 'WARNING: no license files found') ]]; then printf 'There were compiler warnings:\n\n'; cat make.output | grep warning -i | grep -v 'WARNING: no license files found'; exit 1; fi
      fi
